---
- name: Download | Prepare working directories and variables
  import_tasks: prep_download.yml
  when:
    - not skip_downloads | default(false)
  tags:
    - download
    - upload

- name: Download | Get kubeadm binary and list of required images
  include_tasks: prep_kubeadm_images.yml
  when:
    - not skip_downloads | default(false)
    - ('kube_control_plane' in group_names)
  tags:
    - download
    - upload

- name: Download | Check if image command tool exists
  command: "{{ image_command_tool }} --version"
  register: image_command_tool_exists
  changed_when: false
  failed_when: false

- name: Download | Check if image command tool exists
  stat:
    path: "{{ bin_dir }}/{{ image_command_tool }}"
    get_attributes: false
    get_checksum: false
    get_mime: false
  register: image_command_tool_exists
  changed_when: false

- name: Download | Process and download required files and images
  when:
    - not (download_always_pull or skip_downloads) | default(false)
    - image_command_tool_exists.stat.exists
  block:
    - name: Download | Get image list from node
      command: "{{ image_info_command }}"
      register: node_images_raw
      changed_when: false
      check_mode: false
    - name: Download | Set node_images
      include_tasks: "{{ include_file }}"
      vars:
        include_file: "set_node_facts{% if image_command_tool == 'crictl' %}_crictl{% endif %}.yml"
    - name: Download | Show node images
      debug:
        msg: "{{ node_images }}"

- name: Download | Download files / images
  include_tasks: "{{ include_file }}"
  loop: "{{ downloads | combine(kubeadm_images) | dict2items }}"
  vars:
    download: "{{ download_defaults | combine(item.value) }}"
    include_file: "download_{% if download.container %}container{% else %}file{% endif %}.yml"
  when:
    - not skip_downloads | default(false)
    - download.enabled
    - item.value.enabled
    - >
      (
        not (
          item.value.container | default(false)
        )
      )
      or (
        item.value.container and
        download_container and
        (
          not (
            (
                node_images | selectattr('Repository', 'equalto', (item.value.repo | regex_replace('^docker\.io/(library/)?', ''))) | selectattr('Tag', 'equalto', item.value.tag) | list | length > 0
            )
            or (
              node_images | selectattr('Digest', 'equalto', 'sha256:' ~ (item.value.sha256 | default(None))) | list | length > 0
            )
          )
          or download_always_pull
        )
      )
    - (download_run_once and inventory_hostname == download_delegate) or (group_names | intersect(download.groups) | length)

- name: Download | Show downloads
  debug:
    msg: "{{ downloads }}"
